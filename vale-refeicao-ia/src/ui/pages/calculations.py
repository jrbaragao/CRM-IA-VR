"""
P√°gina de c√°lculos com agentes aut√¥nomos baseados em prompts
"""

import streamlit as st
import pandas as pd
from datetime import datetime
import json

from ..components import render_alert
from ...data.database import get_db_manager
from ...agents.log_utils import log_agent_action

def render():
    """Renderiza p√°gina de c√°lculos com agentes aut√¥nomos"""
    st.header("üßÆ C√°lculos Inteligentes com IA")
    st.caption("Sistema de c√°lculos baseado em agentes aut√¥nomos configur√°veis")
    
    # Obter gerenciador de banco
    db = get_db_manager()
    
    # Verificar se h√° tabelas de dados (excluir tabelas do sistema)
    system_tables = ['importacoes', 'agent_logs', 'calculation_configs']
    all_tables = db.list_tables()
    data_tables = [table for table in all_tables if table not in system_tables]
    
    if not data_tables:
        render_alert(
            "‚ö†Ô∏è Nenhuma tabela de dados encontrada. Processe arquivos primeiro na se√ß√£o 'Processamento de Dados'.",
            "warning"
        )
        return
    
    # Tabs principais
    tab1, tab2, tab3 = st.tabs([
        "‚öôÔ∏è Configurar C√°lculos",
        "üöÄ Executar C√°lculos", 
        "üìä Hist√≥rico de C√°lculos"
    ])
    
    with tab1:
        render_calculation_config_tab(db, data_tables)
    
    with tab2:
        render_calculation_execution_tab(db, data_tables)
    
    with tab3:
        render_calculation_history_tab(db)

def render_calculation_config_tab(db, data_tables):
    """Renderiza aba de configura√ß√£o de c√°lculos"""
    
    st.markdown("### ‚öôÔ∏è Configura√ß√£o de C√°lculos Inteligentes")
    st.caption("Configure prompts e ferramentas para agentes aut√¥nomos de c√°lculo")
    
    # Informa√ß√µes sobre o sistema
    with st.expander("‚ÑπÔ∏è Como funciona o Sistema de C√°lculos Inteligentes", expanded=False):
        st.markdown("""
        **üß† Sistema Revolucion√°rio de C√°lculos:**
        
        **üéØ Baseado em Prompts:**
        - Defina o que voc√™ quer calcular em linguagem natural
        - O agente interpreta e executa automaticamente
        - Sem c√≥digo fixo - totalmente flex√≠vel
        
        **üõ†Ô∏è Ferramentas Selecion√°veis:**
        - Escolha quais ferramentas o agente pode usar
        - SQL queries, an√°lises estat√≠sticas, correla√ß√µes
        - **üìä Exporta√ß√£o autom√°tica para Excel/CSV/JSON**
        - Controle total sobre as capacidades do agente
        
        **üîÑ Processo Aut√¥nomo:**
        - Agente planeja e executa m√∫ltiplas etapas
        - Adapta-se aos dados dispon√≠veis
        - Gera relat√≥rios completos automaticamente
        """)
    
    # Formul√°rio de configura√ß√£o
    st.markdown("### üìù Nova Configura√ß√£o de C√°lculo")
    
    with st.form("calculation_config_form"):
        col1, col2 = st.columns([2, 1])
        
        with col1:
            config_name = st.text_input(
                "üìõ Nome da Configura√ß√£o",
                placeholder="Ex: C√°lculo Vale Refei√ß√£o Padr√£o",
                help="Nome √∫nico para identificar esta configura√ß√£o"
            )
            
            config_description = st.text_area(
                "üìù Descri√ß√£o",
                placeholder="Descreva o objetivo desta configura√ß√£o de c√°lculo...",
                height=80,
                help="Descri√ß√£o detalhada do que esta configura√ß√£o faz"
            )
        
        with col2:
            st.markdown("**üìä Tabelas Dispon√≠veis:**")
            for table in data_tables:
                table_info = db.get_table_info(table)
                if table_info:
                    st.caption(f"‚Ä¢ **{table}** ({table_info['total_rows']} registros)")
        
        # Prompt principal
        st.markdown("### üéØ Prompt de C√°lculo")
        calculation_prompt = st.text_area(
            "Descreva o que o agente deve calcular:",
            placeholder="""Exemplo (Vale Refei√ß√£o):
Atue como um especialista de RH e calculista de vale refei√ß√µes no Brasil.

A tabela ativos indica a lista geral de colaboradores e se relaciona com as demais pela coluna MATRICULA.

Gere uma planilha com os colaboradores ativos que tenham direito a vale refei√ß√£o.

N√£o se paga vale refei√ß√£o para colaboradores de f√©rias, que s√£o aprendizes, com afastamentos, que est√£o no exterior ou desligados.

Considere um m√™s de 22 dias √∫teis.

Use a ferramenta 'C√°lculo de Vale Refei√ß√£o' para executar a l√≥gica de neg√≥cio e depois exporte para Excel.""",
            height=200,
            help="Seja espec√≠fico sobre regras, condi√ß√µes e formato do resultado desejado"
        )
        
        # Sele√ß√£o de ferramentas
        st.markdown("### üõ†Ô∏è Ferramentas Dispon√≠veis para o Agente")
        
        available_tools = get_available_tools()
        selected_tools = []
        
        col1, col2, col3 = st.columns(3)
        
        with col1:
            st.markdown("**üîç An√°lise de Dados:**")
            for tool in available_tools['data_analysis']:
                if st.checkbox(f"{tool['icon']} {tool['name']}", key=f"tool_{tool['id']}"):
                    selected_tools.append(tool['id'])
        
        with col2:
            st.markdown("**üßÆ C√°lculos:**")
            for tool in available_tools['calculations']:
                if st.checkbox(f"{tool['icon']} {tool['name']}", key=f"tool_{tool['id']}"):
                    selected_tools.append(tool['id'])
        
        with col3:
            st.markdown("**üìä Exporta√ß√£o:**")
            for tool in available_tools['export_tools']:
                if st.checkbox(f"{tool['icon']} {tool['name']}", key=f"tool_{tool['id']}"):
                    selected_tools.append(tool['id'])
        
        # Configura√ß√µes do agente
        col1, col2 = st.columns(2)
        
        with col1:
            max_iterations = st.slider("üîÑ Max Itera√ß√µes", 1, 15, 8)
            exploration_depth = st.selectbox("üîç Profundidade", ["B√°sica", "Intermedi√°ria", "Avan√ßada"], index=2)
        
        with col2:
            include_insights = st.checkbox("üí° Incluir Insights", True)
            show_reasoning = st.checkbox("üß† Mostrar Racioc√≠nio", True)
        
        # Bot√£o de salvar
        submitted = st.form_submit_button("üíæ Salvar Configura√ß√£o", type="primary")
        
        if submitted:
            if not config_name.strip():
                st.error("‚ùå Nome da configura√ß√£o √© obrigat√≥rio!")
            elif not calculation_prompt.strip():
                st.error("‚ùå Prompt de c√°lculo √© obrigat√≥rio!")
            elif not selected_tools:
                st.error("‚ùå Selecione pelo menos uma ferramenta!")
            else:
                config = {
                    'max_iterations': max_iterations,
                    'exploration_depth': exploration_depth,
                    'include_insights': include_insights,
                    'show_reasoning': show_reasoning
                }
                
                success = db.save_calculation_config(
                    config_name.strip(),
                    config_description.strip(),
                    calculation_prompt.strip(),
                    selected_tools,
                    config
                )
                
                if success:
                    st.success("‚úÖ Configura√ß√£o salva com sucesso!")
                    st.rerun()
    
    # Lista de configura√ß√µes existentes
    st.markdown("---")
    st.markdown("### üìã Configura√ß√µes Existentes")
    
    configs = db.get_calculation_configs()
    
    if configs:
        for config in configs:
            with st.expander(f"‚öôÔ∏è {config['name']}", expanded=False):
                st.markdown(f"**Descri√ß√£o:** {config['description']}")
                st.markdown(f"**Ferramentas:** {len(config['available_tools'])} selecionadas")
                
                col1, col2 = st.columns(2)
                with col1:
                    if st.button("‚úèÔ∏è Editar", key=f"edit_{config['id']}"):
                        st.info("üöß Em desenvolvimento")
                with col2:
                    if st.button("üóëÔ∏è Remover", key=f"delete_{config['id']}"):
                        if db.delete_calculation_config(config['name']):
                            st.success("‚úÖ Removido!")
                            st.rerun()
    else:
        st.info("üìù Nenhuma configura√ß√£o criada ainda.")

def render_calculation_execution_tab(db, data_tables):
    """Renderiza aba de execu√ß√£o de c√°lculos"""
    
    st.markdown("### üöÄ Executar C√°lculos Inteligentes")
    
    configs = db.get_calculation_configs()
    
    if not configs:
        st.warning("‚ö†Ô∏è Nenhuma configura√ß√£o dispon√≠vel.")
        st.info("üí° Crie uma configura√ß√£o na aba 'Configurar C√°lculos' primeiro.")
        return
    
    # Sele√ß√£o de configura√ß√£o
    config_options = {config['name']: config for config in configs}
    selected_config_name = st.selectbox(
        "Escolha a configura√ß√£o:",
        options=list(config_options.keys())
    )
    
    if selected_config_name:
        selected_config = config_options[selected_config_name]
        
        with st.expander("‚ÑπÔ∏è Detalhes da Configura√ß√£o", expanded=True):
            st.markdown(f"**üìù Descri√ß√£o:** {selected_config['description']}")
            st.markdown(f"**üõ†Ô∏è Ferramentas:** {len(selected_config['available_tools'])}")
            st.code(selected_config['prompt'], language='text')
        
        if st.button("üöÄ Iniciar C√°lculo Aut√¥nomo", type="primary"):
            execution_container = st.empty()
            execute_autonomous_calculation(db, data_tables, selected_config, execution_container)

def render_calculation_history_tab(db):
    """Renderiza aba de hist√≥rico"""
    
    st.markdown("### üìä Hist√≥rico de C√°lculos")
    
    if 'calculation_history' in st.session_state and st.session_state['calculation_history']:
        history = st.session_state['calculation_history']
        
        for i, calc in enumerate(reversed(history[-5:])):
            with st.expander(f"üßÆ {calc['config_name']} - {calc['timestamp']}", expanded=False):
                st.markdown(f"**Status:** {calc.get('status', 'Conclu√≠do')}")
                st.markdown(f"**Itera√ß√µes:** {calc.get('iterations', 'N/A')}")
    else:
        st.info("üìù Nenhum c√°lculo executado ainda.")

def get_available_tools():
    """Retorna ferramentas dispon√≠veis"""
    return {
        'data_analysis': [
            {'id': 'sql_query', 'name': 'Consultas SQL', 'icon': 'üîç'},
            {'id': 'data_exploration', 'name': 'Explora√ß√£o de Dados', 'icon': 'üìä'},
            {'id': 'data_correlation', 'name': 'Correla√ß√µes', 'icon': 'üîó'},
            {'id': 'data_quality', 'name': 'Qualidade dos Dados', 'icon': '‚úÖ'}
        ],
        'calculations': [
            {'id': 'calculo_vale_refeicao', 'name': 'üçΩÔ∏è C√°lculo de Vale Refei√ß√£o', 'icon': 'üí∞'},
            {'id': 'mathematical_operations', 'name': 'Opera√ß√µes Matem√°ticas', 'icon': 'üßÆ'},
            {'id': 'conditional_logic', 'name': 'L√≥gica Condicional', 'icon': 'üîÄ'},
            {'id': 'aggregations', 'name': 'Agrega√ß√µes', 'icon': 'üìà'},
            {'id': 'report_generation', 'name': 'Relat√≥rios', 'icon': 'üìÑ'}
        ],
        'export_tools': [
            {'id': 'excel_export', 'name': 'Exportar para Excel', 'icon': 'üìä'},
            {'id': 'csv_export', 'name': 'Exportar para CSV', 'icon': 'üìÑ'},
            {'id': 'json_export', 'name': 'Exportar para JSON', 'icon': 'üîó'}
        ]
    }

def execute_autonomous_calculation(db, data_tables, config, container):
    """Executa c√°lculo usando agente aut√¥nomo"""
    
    from .database_viewer import execute_autonomous_agent
    from ...agents.log_utils import log_agent_action
    
    with container.container():
        st.markdown("## üßÆ Agente de C√°lculo em A√ß√£o")
        st.markdown(f"**Configura√ß√£o:** {config['name']}")
        
        # Debug: Log da configura√ß√£o recebida
        log_agent_action(
            "calculation_debug",
            "üîß Configura√ß√£o carregada",
            {
                "config_name": config['name'],
                "available_tools": config.get('available_tools', []),
                "tools_count": len(config.get('available_tools', [])),
                "prompt_length": len(config.get('prompt', ''))
            }
        )
        
        # Exibir ferramentas selecionadas para o usu√°rio
        st.markdown("### üõ†Ô∏è Ferramentas Selecionadas:")
        if config.get('available_tools'):
            for tool in config['available_tools']:
                st.markdown(f"‚Ä¢ ‚úÖ {tool}")
        else:
            st.warning("‚ö†Ô∏è Nenhuma ferramenta selecionada!")
        
        calculation_prompt = f"""
        CONTEXTO: Voc√™ √© um agente especializado em c√°lculos de benef√≠cios e an√°lises de RH.
        
        OBJETIVO: {config['prompt']}
        
        FERRAMENTAS DISPON√çVEIS: {', '.join(config['available_tools'])}
        
        INSTRU√á√ïES:
        1. Analise os dados dispon√≠veis nas tabelas
        2. Aplique as regras de c√°lculo especificadas
        3. Gere resultados detalhados e organizados
        4. Forne√ßa relat√≥rios com totais e estat√≠sticas
        
        Execute o c√°lculo de forma aut√¥noma.
        """
        
        success = execute_autonomous_agent(db, data_tables, calculation_prompt, config, container)
        
        if success:
            if 'calculation_history' not in st.session_state:
                st.session_state['calculation_history'] = []
            
            calculation_record = {
                'config_name': config['name'],
                'timestamp': datetime.now().strftime('%Y-%m-%d %H:%M:%S'),
                'status': 'Conclu√≠do'
            }
            
            st.session_state['calculation_history'].append(calculation_record)
            
            log_agent_action(
                "calculation_agent",
                "‚úÖ C√°lculo aut√¥nomo conclu√≠do",
                {"configuracao": config['name']}
            )
